{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\jcqui\\\\OneDrive\\\\Escritorio\\\\henri_barrett\\\\yes-mom\\\\yesmom_next\\\\pages\\\\blog\\\\[blog].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useRouter } from \"next/router\";\n\nvar CardBlogEspecific = function CardBlogEspecific(_ref) {\n  _s();\n\n  var currentData = _ref.currentData;\n  var router = useRouter();\n  console.log(router, \"judith\");\n  console.log(currentData, \"judith:)\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Holaaa Per\\xFA \", router.query.blog]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, _this);\n}; // export async function getStaticPaths() {\n//     // Call an external API endpoint to get posts\n//     const res = await fetch('http://localhost:5000/getBlogAll/user?limit=all')\n//     const blogs = await res.json()\n//     // Get the paths we want to pre-render based on posts\n//     const paths = blogs.map((blog) => ({\n//       params: { blog: blog._id },\n//     }))\n//     // We'll pre-render only these paths at build time.\n//     // { fallback: false } means other routes should 404.\n//     return { paths, fallback: false }\n//   }\n// export async function getStaticProps() {\n//     // Call an external API endpoint to get posts.\n//     // You can use any data fetching library\n//     const res = await fetch(`http://localhost:5000//getBlog/${router.query.blog}`);\n//     const currentData = await res.json();\n//     // By returning { props: posts }, the Blog component\n//     // will receive `posts` as a prop at build time\n//     return {\n//       props: {\n//         currentData,\n//       },\n//     };\n//   }\n\n\n_s(CardBlogEspecific, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = CardBlogEspecific;\nexport default CardBlogEspecific;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardBlogEspecific\");","map":{"version":3,"sources":["C:/Users/jcqui/OneDrive/Escritorio/henri_barrett/yes-mom/yesmom_next/pages/blog/[blog].js"],"names":["useRouter","CardBlogEspecific","currentData","router","console","log","query","blog"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAmB;AAAA;;AAAA,MAAjBC,WAAiB,QAAjBA,WAAiB;AACzC,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AACJI,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAmB,QAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ,EAAwB,UAAxB;AAEI,sBACI;AAAA,2BACI;AAAA,oCAAgBC,MAAM,CAACG,KAAP,CAAaC,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAMH,CAXD,C,CAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAzCMN,iB;UACaD,S;;;KADbC,iB;AA2CN,eAAgBA,iBAAhB","sourcesContent":["import { useRouter } from \"next/router\";\r\n\r\nconst CardBlogEspecific = ({currentData}) => {\r\n    const router = useRouter();\r\nconsole.log(router,\"judith\")\r\nconsole.log(currentData,\"judith:)\")\r\n\r\n    return (\r\n        <div>\r\n            <p>Holaaa Perú {router.query.blog}</p>\r\n            {/* <p>Holaaa Perú {currentData.blog.titulo}</p> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n// export async function getStaticPaths() {\r\n//     // Call an external API endpoint to get posts\r\n//     const res = await fetch('http://localhost:5000/getBlogAll/user?limit=all')\r\n//     const blogs = await res.json()\r\n  \r\n//     // Get the paths we want to pre-render based on posts\r\n//     const paths = blogs.map((blog) => ({\r\n//       params: { blog: blog._id },\r\n//     }))\r\n  \r\n//     // We'll pre-render only these paths at build time.\r\n//     // { fallback: false } means other routes should 404.\r\n//     return { paths, fallback: false }\r\n//   }\r\n\r\n// export async function getStaticProps() {\r\n//     // Call an external API endpoint to get posts.\r\n//     // You can use any data fetching library\r\n//     const res = await fetch(`http://localhost:5000//getBlog/${router.query.blog}`);\r\n//     const currentData = await res.json();\r\n  \r\n//     // By returning { props: posts }, the Blog component\r\n//     // will receive `posts` as a prop at build time\r\n//     return {\r\n//       props: {\r\n//         currentData,\r\n//       },\r\n//     };\r\n//   }\r\n  \r\nexport default  CardBlogEspecific\r\n"]},"metadata":{},"sourceType":"module"}